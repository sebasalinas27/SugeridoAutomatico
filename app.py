# ‚úÖ SUGERIDO AUTOM√ÅTICO v1.0 - Asignaci√≥n de Stock a Tiendas por Prioridad y Demanda
import streamlit as st
import pandas as pd
import numpy as np
import io
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns

# 1. CONFIGURACI√ìN DE LA APP
st.set_page_config(page_title="Sugerido Autom√°tico", layout="centered")

st.markdown("""
<style>
h1, h2, h3 {
    text-align: center;
}
hr {
    margin-top: 1rem;
    margin-bottom: 1rem;
}
</style>
""", unsafe_allow_html=True)

st.markdown("""
# ü§ñ Sugerido Autom√°tico de Productos a Tiendas (v1.0)

Este sistema permite automatizar la asignaci√≥n de stock disponible a tiendas f√≠sicas, utilizando datos hist√≥ricos de ventas, inventario actual y stock en bodega. Su prop√≥sito es **generar sugerencias de reposici√≥n** de productos para cada tienda y cada c√≥digo.

üîç El modelo se basa en:
- El **promedio de ventas** de las √∫ltimas 4 semanas por producto y tienda.
- El **stock actual en tienda**, comparado contra la demanda estimada.
- El **stock disponible en bodega**, el cual se asigna seg√∫n el m√©todo elegido.
- La **prioridad de cada tienda**, para definir a qui√©n abastecer primero si hay escasez.

üìà El resultado final es un archivo Excel que muestra:
- Cu√°ntas unidades asignar por tienda y c√≥digo.
- Qu√© tiendas no fueron abastecidas.
- Un resumen de cobertura de demanda.

Puedes elegir entre dos m√©todos de asignaci√≥n:
- üîÅ **Prioridad directa:** abastece primero a las tiendas m√°s importantes.
- ‚öñÔ∏è **Proporcional ponderada:** reparte stock considerando tanto la demanda como la prioridad.

Ideal para equipos comerciales, planificadores o sistemas de reposici√≥n que requieren eficiencia y control centralizado.
""")

# 2. ENLACE AL ARCHIVO DE EJEMPLO
st.markdown("""
### üì• Archivo de ejemplo para probar la app
üëâ [Descargar archivo de ejemplo](https://github.com/sebasalinas27/SugeridoAutomatico/raw/main/archivo_ejemplo.xlsx)
""")

st.markdown("---")

# 3. CARGA DEL ARCHIVO
uploaded_file = st.file_uploader("Sube tu archivo Excel con ventas, stock y prioridades", type=["xlsx"])

if uploaded_file:

    # 4. VISTA PREVIA DE LOS DATOS
    st.subheader("üëÅÔ∏è Vista previa de los datos cargados")
    col1, col2 = st.columns(2)
    df_stock_tienda = pd.read_excel(uploaded_file, sheet_name="Stock Tienda")
    df_ventas = pd.read_excel(uploaded_file, sheet_name="Ventas")
    df_stock_bodega = pd.read_excel(uploaded_file, sheet_name="Stock Bodega")
    df_prioridad = pd.read_excel(uploaded_file, sheet_name="Prioridad Tiendas")

    col1.metric("üì¶ Stock en Tiendas", df_stock_tienda.shape[0])
    col2.metric("üõí Ventas Registradas", df_ventas.shape[0])
    col1.metric("üè¨ Tiendas", df_stock_tienda['Tienda'].nunique())
    col2.metric("üî¢ C√≥digos", df_stock_tienda['Codigo'].nunique())

    st.markdown("---")

    # 5. SELECCI√ìN DE M√âTODO DE ASIGNACI√ìN
    # üîé RECOMENDACI√ìN AUTOM√ÅTICA SEG√öN STOCK
    total_stock = df_stock_bodega['Stock Disponible'].sum()
    total_sugerido = df_ventas.groupby(['Codigo', 'Tienda']).tail(4).groupby(['Codigo', 'Tienda'])['Unidades Vendidas'].mean().clip(lower=0).sum()

    if total_sugerido > 0:
        cobertura = total_stock / total_sugerido
        if cobertura < 0.75:
            st.warning("üîé Recomendaci√≥n: Usa **'Por prioridad directa'** porque el stock disponible es limitado.")
        elif cobertura >= 0.75 and cobertura < 1.25:
            st.info("üîé Recomendaci√≥n: Ambas estrategias son v√°lidas, considera tu objetivo comercial.")
        else:
            st.success("üîé Recomendaci√≥n: Usa **'Proporcionalidad ponderada'** porque el stock disponible es alto.")
    st.subheader("‚öôÔ∏è Par√°metros de asignaci√≥n")
    metodo_asignacion = st.radio(
        "Selecciona el m√©todo de asignaci√≥n de stock a tiendas:",
        ["üîÅ Por prioridad directa", "‚öñÔ∏è Por proporcionalidad ponderada"]
    )

    if metodo_asignacion == "üîÅ Por prioridad directa":
        st.info("""
        üîÅ **Por prioridad directa**:
        - Se asigna stock comenzando por las tiendas de mayor prioridad.
        - Si el stock disponible no alcanza, las tiendas con menor prioridad pueden no recibir unidades.
        - Es ideal cuando se quiere garantizar abastecimiento a tiendas clave.
        """)
    elif metodo_asignacion == "‚öñÔ∏è Por proporcionalidad ponderada":
        st.info("""
        ‚öñÔ∏è **Por proporcionalidad ponderada**:
        - El stock se reparte proporcionalmente seg√∫n la demanda estimada.
        - Se pondera a favor de tiendas con mayor prioridad, pero se distribuye entre todas.
        - Es ideal para mantener presencia equilibrada en puntos de venta.
        """)

    # 6. EJECUCI√ìN DEL MODELO
    st.subheader("üöÄ Ejecutar sugerido autom√°tico")
    if st.button("Ejecutar reposici√≥n"):
        try:
            # 6.1 C√ÅLCULO DE REPOSICI√ìN SUGERIDA
            df_ventas_recientes = df_ventas.sort_values("Semana", ascending=False).groupby(["Codigo", "Tienda"]).head(4)
            df_ventas_sugerido = df_ventas_recientes.groupby(["Codigo", "Tienda"]).agg({"Unidades Vendidas": "mean"}).reset_index()
            df_ventas_sugerido.rename(columns={"Unidades Vendidas": "Reposici√≥n Sugerida"}, inplace=True)

            df = df_ventas_sugerido.merge(df_stock_tienda, on=["Codigo", "Tienda"], how="left")
            df = df.merge(df_prioridad, on="Tienda", how="left")
            df["Prioridad"] = pd.to_numeric(df["Prioridad"], errors='coerce').fillna(5)
            df["Reposici√≥n Necesaria"] = (df["Reposici√≥n Sugerida"] - df["Stock Actual"]).clip(lower=0)

            stock_bodega = df_stock_bodega.set_index("Codigo")["Stock Disponible"].to_dict()
            asignaciones = []

            # 6.2 ASIGNACI√ìN SEG√öN M√âTODO
            if metodo_asignacion == "üîÅ Por prioridad directa":
                for codigo in df["Codigo"].unique():
                    df_codigo = df[df["Codigo"] == codigo].sort_values("Prioridad")
                    disponible = stock_bodega.get(codigo, 0)
                    for _, row in df_codigo.iterrows():
                        pedir = row["Reposici√≥n Necesaria"]
                        asignado = int(min(disponible, pedir))
                        disponible -= asignado
                        asignaciones.append({"Codigo": codigo, "Tienda": row["Tienda"], "Asignado": asignado})
            else:
                for codigo in df["Codigo"].unique():
                    df_codigo = df[df["Codigo"] == codigo].copy()
                    disponible = stock_bodega.get(codigo, 0)
                    df_codigo = df_codigo[df_codigo["Reposici√≥n Necesaria"] > 0]
                    if df_codigo.empty or disponible == 0:
                        continue
                    df_codigo["Peso"] = 1 / df_codigo["Prioridad"]
                    df_codigo["Demanda Ponderada"] = df_codigo["Reposici√≥n Necesaria"] * df_codigo["Peso"]
                    total_ponderado = df_codigo["Demanda Ponderada"].sum()
                    for _, row in df_codigo.iterrows():
                        asignado = int(min(disponible, disponible * row["Demanda Ponderada"] / total_ponderado))
                        asignaciones.append({"Codigo": codigo, "Tienda": row["Tienda"], "Asignado": round(asignado)})

            df_asignacion = pd.DataFrame(asignaciones)

            # 6.3 RESUMEN FINAL
            stock_total = df_stock_bodega["Stock Disponible"].sum()
            sugerido_total = df["Reposici√≥n Necesaria"].sum()
            asignado_total = df_asignacion["Asignado"].sum()
            tiendas_sin_asignacion = set(df["Tienda"]) - set(df_asignacion[df_asignacion["Asignado"] > 0]["Tienda"])

            df_resumen = pd.DataFrame({
                "Elemento": [
                    "Fecha ejecuci√≥n",
                    "M√©todo de asignaci√≥n usado",
                    "Total stock en bodega",
                    "Total unidades sugeridas",
                    "Total unidades asignadas",
                    "Porcentaje de demanda cubierta",
                    "N√∫mero de tiendas abastecidas",
                    "Tiendas sin asignaci√≥n"
                ],
                "Valor": [
                    datetime.now().strftime("%Y-%m-%d %H:%M"),
                    metodo_asignacion,
                    stock_total,
                    sugerido_total,
                    asignado_total,
                    f"{(asignado_total / sugerido_total * 100):.1f}%" if sugerido_total > 0 else "0%",
                    df_asignacion[df_asignacion["Asignado"] > 0]["Tienda"].nunique(),
                    len(tiendas_sin_asignacion)
                ]
            })

            # 7. VISUALIZACI√ìN Y EXPORTACI√ìN
            st.markdown("---")
            st.header("üìã Resumen de Reposici√≥n")
            st.dataframe(df_resumen)

            output = io.BytesIO()
            with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
                df_asignacion.to_excel(writer, sheet_name="Asignaci√≥n", index=False)
                df.to_excel(writer, sheet_name="Reposici√≥n Sugerida", index=False)
                df_resumen.to_excel(writer, sheet_name="Resumen Reposici√≥n", index=False)
            output.seek(0)

            st.download_button(
                label="üì• Descargar Excel de resultados",
                data=output.getvalue(),
                file_name="sugerido_resultados.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

        except Exception as e:
            st.error(f"‚ùå Error al ejecutar la reposici√≥n: {e}")
        except Exception as e:
            st.error(f"‚ùå Error al ejecutar la reposici√≥n: {e}")
